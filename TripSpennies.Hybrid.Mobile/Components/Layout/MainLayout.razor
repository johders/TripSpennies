@using System.ComponentModel
@inherits LayoutComponentBase

@implements IDisposable

@inject MauiInterop interop
@inject NavigationManager navManager
@inject AppState appState

<div class="w-100 position-fixed p-3 mb-3 bg-white shadow-sm top-navbar">
	<div class="hstack gap-3">
		<h3 class="m-0 w-100 @(interop.IsIos ? "text-center" : "text-start")">@appState.PageTitle</h3>
		<i class="bi bi-person-circle h2 my-auto"></i>
	</div>
</div>

<div class="body-content">
	@Body
</div>

<div class="d-flex justify-content-center w-100">
	<div class="d-flex justify-content-center align-items-center vw-90 p-2 mx-1 my-2 bg-success bg-gradient position-fixed rounded-pill shadow-lg bottom-tabbar">
		<label class="rounded-pill px-3 py-1 text-white m-0 d-flex flex-column align-items-center @(IsHomeSelected ? "shadow-lg" : "light-white")"
			   @onclick="() => GoToPage(AppConstants.MenuItems.Home)">
			<i class="bi @(IsHomeSelected ? "bi-house-door-fill" : "bi-house-door") h3 mb-0"></i>
			<span class="fs-12">Home</span>
		</label>
		<label class="rounded-pill px-3 py-1 text-white m-0 d-flex flex-column align-items-center @(IsTripsSelected ? "shadow-lg" : "light-white" )"
		@onclick="() => GoToPage(AppConstants.MenuItems.Trips)">
			<i class="bi @(IsTripsSelected ? "bi-suitcase-lg-fill" : "bi-suitcase-lg") h3 mb-0"></i>
			<span class="fs-12">Trips</span>
		</label>
		<label class="rounded-pill px-3 py-1 light-white m-0 d-flex flex-column align-items-center" @onclick="@(() => GoToInnerPage("/trips/manage"))" >
			<i class="bi bi-plus-circle h1 mb-0"></i>
		</label>
		<label class="rounded-pill px-3 py-1 text-white m-0 d-flex flex-column align-items-center @(IsSettingsSelected ? "shadow-lg" : "light-white" )" 
		@onclick="() => GoToPage(AppConstants.MenuItems.Settings)">
			<i class="bi @(IsSettingsSelected ? "bi-gear-fill" : "bi-gear") h3 mb-0"></i>
			<span class="fs-12">Settings</span>
		</label>
	</div>
</div>

@code{

	private static IDictionary<string, string> _pagesMap = new Dictionary<string, string>
	{
		[AppConstants.MenuItems.Home] = "/",
		[AppConstants.MenuItems.Trips] = "/trips",
		[AppConstants.MenuItems.Settings] = "/settings"
	};

	private bool IsHomeSelected => appState.SelectedMenuItem == AppConstants.MenuItems.Home;
	private bool IsTripsSelected => appState.SelectedMenuItem == AppConstants.MenuItems.Trips;
	private bool IsSettingsSelected => appState.SelectedMenuItem == AppConstants.MenuItems.Settings;

	protected override void OnInitialized()
	{
		appState.PropertyChanged += OnAppStatePropertyChanged;
	}

	private void OnAppStatePropertyChanged(object? sender, PropertyChangedEventArgs e)
	{
		if(e.PropertyName == nameof(appState.SelectedMenuItem))
		{
			StateHasChanged();
		}
	}

	private void GoToPage(string pageName)
	{
		navManager.NavigateTo(_pagesMap[pageName]);
	}

	private void GoToInnerPage(string url)
	{
		navManager.GoToInnerPage(url);
	}

	public void Dispose()
	{
		appState.PropertyChanged -= OnAppStatePropertyChanged;
	}
}
