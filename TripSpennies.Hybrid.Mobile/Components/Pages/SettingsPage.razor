@page "/settings"

@inject NavigationManager navManager

@inject MauiInterop mauiInterop
@inject AppState appState
@inject AuthorizationService authorizeService

<div class="container p-3">
	<div class="d-flex flex-column justify-content-center align-items-center h-remaining">
		<label class="rounded-circle text-uppercase bg-success bg-gradient text-white text-center fw-bold shadow-lg avatar">
			@authorizeService.CurrentUser.Name?[0]
		</label>
		<div class="flex-grow-1 my-3 py-2 w-100 d-flex align-items-center">
			<ul class="list-group list-group-flush w-100">
				<li class="list-group-item" @onclick="ChangeNameAsync">
					<div class="hstack gap-3">
						<i class="bi bi-person-circle"></i>
						<label>Change username</label>
					</div>
				</li>

				<li class="list-group-item" @onclick="ChangePasswordAsync">
					<div class="hstack gap-3">
						<i class="bi bi-lock"></i>
						<label>Change password</label>
					</div>
				</li>

				<li class="list-group-item" @onclick="GoToManageExpenseCategoriesPage">
					<div class="hstack gap-3">
						<i class="bi bi-columns"></i>
						<label>Manage expense categories</label>
					</div>
				</li>

				<li class="list-group-item">
					<div class="hstack gap-3">
						<label>Made with dread by yours truly xox</label>
					</div>
				</li>

			</ul>
		</div>
		<label class="bg-danger rounded-pill py-1 px-3 text-white m-0 d-flex align-items-center" @onclick="Signout">
		<i class="bi bi-box-arrow-right m-0 p-0 me-2"></i>
		<span>Sign Out</span>
		</label>

	</div>
</div>

@code {
	protected override async Task OnInitializedAsync()
	{
		appState.SetSelectedMenuItem(AppConstants.MenuItems.Settings);
		appState.AddTabbarItems(new TabbarItem("bi-door-open", () => mauiInterop.OpenInLauncher()));
	}

	private void Signout()
	{
		authorizeService.SignOut();
		navManager.NavigateTo("/signin", replace: true);
	}

	private async Task ChangeNameAsync()
	{
		var newName = await mauiInterop.ShowPromptAsync("Your name", "Enter name", "Save", authorizeService.CurrentUser.Name);

		if (!string.IsNullOrWhiteSpace(newName))
		{
			mauiInterop.ShowLoader();
			await authorizeService.ChangeNameAsync(newName);
			mauiInterop.HideLoader();
		}
	}

	private async Task ChangePasswordAsync()
	{
		var newPassword = await mauiInterop.ShowPromptAsync("Change Password", "Enter new password", "Save", string.Empty);

		if (!string.IsNullOrWhiteSpace(newPassword))
		{
			mauiInterop.ShowLoader();
			await authorizeService.ChangePasswordAsync(newPassword);
			mauiInterop.HideLoader();
		}
	}

	private void GoToManageExpenseCategoriesPage()
	{
		navManager.GoToInnerPage("manage-expense-categories");
	}

}

<style type="text/css" scoped>
	.h-remaining{
		height: calc(100vh - var(--navbar-height) - 100px);
	}

	.avatar{
		height: 80px;
		width: 80px;
		font-size: 50px;
	}
</style>