@page "/trips/manage"

@layout InnerPagesLayout

@inject NavigationManager navManager

@inject MauiInterop mauiInterop
@inject DropdownService dropdownService
@inject TripsService tripsService
@inject AppState appState

<div class="img-container m-0 p-0 vw-100">

</div>

<EditForm Model="_model" OnValidSubmit="SaveTripAsync">
	<DataAnnotationsValidator/>
	<div class="form-container">
		<div class="form-body bg-white shadow d-flex flex-column">
			<h3 class="mt-3 text-center">Add new trip</h3>
			<div class="mt-3 flex-grow-1">
				<div class="mb-3">
					<label class="form-label">Category</label>
					<InputText type="hidden" @bind-Value="_model.CategoryImage"/>
					<div class="d-flex flex-wrap justify-content-around">
						@foreach(var category in _locationCategories)
						{
							var iconClass = "bi bi-check-circle-fill text-muted";
							var borderClass = "";
							var nameClass = "text-muted";

							if(_model.CategoryImage == category.Image)
							{
								iconClass = "bi bi-check-circle-fill text-success";
								borderClass = "border-success shadow";
								nameClass = "text-dark";
							}

							<div class="rounded px-1 v-stack text-center border m-1 @borderClass" @onclick="() => ToggleCategorySelection(category)">
								<i class="position-absolute @iconClass"></i>
								<img class="mt-3 mb-1 ms-1 category-img" src="@category.Image"/>
								<label class="category-label @nameClass">@category.Name</label>
							</div>
						}
						<ValidationMessage For="() => _model.CategoryImage"/>
					</div>
				</div>
				<div class="mb-3">
					<label class="form-label">Trip name</label>
					<InputText @bind-Value="_model.Title" class="form-control rounded-pill fs-6" placeholder="Trip title"/>
					<ValidationMessage For="() => _model.Title"/>
				</div>
				<div class="mb-3">
					<label class="form-label">Trip location (City/Country)</label>
					<InputText @bind-Value="_model.Location" class="form-control rounded-pill fs-6" placeholder="Trip location"/>
					<ValidationMessage For="() => _model.Location"/>
				</div>
				<div class="row">
					<div class="col">
						<div class="mb-3">
							<label class="form-label">Trip start date</label>
							<InputDate @bind-Value="_model.FromDate" class="form-control rounded-pill fs-6" placeholder="Trip start date"/>
							<ValidationMessage For="() => _model.FromDate"/>
						</div>
					</div>
					<div class="col">
						<div class="mb-3">
							<label class="form-label">Trip end date</label>
							<InputDate @bind-Value="_model.ToDate" class="form-control rounded-pill fs-6" placeholder="Trip end date"/>
							<ValidationMessage For="() => _model.ToDate"/>
						</div>
					</div>
				</div>
			</div>

			<div class="mb-3">
					<label class="form-label">Trip status</label>
					<InputSelect @bind-Value="_model.DisplayStatus" class="form-control rounded-pill fs-6">
						@foreach(var status in _statuses)
						{
							<option value="@status">@status</option>
						}
					</InputSelect>
					<ValidationMessage For="() => _model.DisplayStatus"/>
			</div>

			<div class="row my-3">
				<div class="col-1"></div>
				<div class="col-2">
					<button type="button" class="btn btn-outline-danger shadow" @onclick="() => navManager.GoBack()">
						<i class="bi bi-x-lg"></i>
					</button>
				</div>
				<div class="col-1"></div>
				<div class="col-7">
					<button type="submit" class="btn btn-primary rounded-pill shadow">Save</button>
				</div>
				<div class="col-1"></div>
			</div>

			

		</div>
	</div>

</EditForm>

@code {
	Trip _model = new();

	private LocationCategory[] _locationCategories = Array.Empty<LocationCategory>();
	private string[] _statuses = Array.Empty<string>();

	protected override async Task OnInitializedAsync()
	{
		appState.SetInnerPageTitle("Add trip");
		mauiInterop.ShowLoader();
		_locationCategories = await dropdownService.GetLocationCategoriesAsync();
		_statuses = dropdownService.GetTripStatuses();
		mauiInterop.HideLoader();
	}

	private void ToggleCategorySelection(LocationCategory category)
	{
		if(_model.CategoryImage == category.Image)
		{
			_model.CategoryImage = string.Empty;
		}
		else
		{
			_model.CategoryImage = category.Image;
		}
	}

	private async Task SaveTripAsync()
	{
		mauiInterop.ShowLoader();
		try
		{
			var result = await tripsService.SaveTripAsync(_model);

			if (result.IsSuccess)
			{
				await mauiInterop.ShowToastAsync("Trip saved");
				navManager.GoBack();
			}
			else
			{
				await mauiInterop.ShowErrorAlertAsync(result.Error ?? "Error saving trip");

			}
		}
		catch (Exception ex)
		{
			await mauiInterop.ShowErrorAlertAsync(ex.Message);
		}
		finally
		{
			mauiInterop.HideLoader();
		}
	}
}
